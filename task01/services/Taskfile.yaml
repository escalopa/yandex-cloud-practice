version: '3'

vars:
  USER_ID: vvot42
  TFVARS_PATH: "./../terraform.tfvars"

tasks:
  zip:
    cmds:
      - cd ./face-detection && zip -r main.zip go.*  main.go && cd .. 
      # - zip -r ./face-cut/main.zip ./face-cut/main.go ./face-cut/go.mod ./face-cut/go.sum 
      # - zip -r ./tg-bot/main.zip ./tg-bot/main.go ./tg-bot/go.mod ./tg-bot/go.sum 

  init:
    cmds:
      - terraform init

  plan:
    cmds:
      - terraform plan -var-file={{.TFVARS_PATH}}

  validate:
    cmds:
      - terraform validate

  apply:
    cmds:
      - terraform apply -var-file={{.TFVARS_PATH}}

  destroy:
    cmds:
     - terraform destroy -var-file={{.TFVARS_PATH}}

  trigger:
    cmds:
      # Create face_detection_trigger on bucket upload
      - yc serverless trigger create object-storage
        --name {{.USER_ID}}-photo
        --bucket-id {{.USER_ID}}-photos
        --events 'create-object' 
        --invoke-function-id  $(terraform output -raw function_face_detection_id)
        --invoke-function-service-account-id  $(terraform output -raw sa_function_id)
        --retry-attempts 1 
        --retry-interval 10s

      # Create face_cut_trigger on bucket upload
      # - yc serverless trigger create message-queue
      #   --name {{.USER_ID}}-cut
      #   --queue yrn:yc:ymq:ru-central1:b1gpe83orpai36rd0p30:vvot42-task
      #   --queue-service-account-id {{.USER_ID}}-serverless-manager
      #   --invoke-function-id {{.USER_ID}}-face-cut
      #   --invoke-function-service-account-id {{.USER_ID}}-serverless-manager
      #   --batch-size 1
      #   --batch-cutoff 10s


